@startuml

class IpV4Address
{
   - m_IpAddr: uint32

   + IpV4Address(const uint32)
   + IpV4Address(const std::string)
   + get_addr(): uint32
   + to_string() std::string
}

class IpV6Address
{
   - m_IpAddr: uint128

   + IpV6Address(const uint128)
   + IpV6Address(const std::string)
   + get_addr(): uint32
   + to_string() std::string
}

class SocketAddress<T>
{
   - m_ip_addr : T
   - m_port : uint16

   + SocketAddress(T ipAddr, uint16 port)
}

class ITcpStream
{
   + connect(SocketAddress address): bool
   + disconnect(): bool
   + receive(uint8_t* buffer, const size_t buffer_length): int 
   + send(const uint8_t* buffer, const size_t bytes_to_send): int
}

class ITcpListener
{
   + bind(SocketAddress address): bool
   + listen(): bool
   + accept(): shared_ptr<ITcpStream>
   + disconnect(): bool
}

class TcpStream
{
   - m_mutex : std::mutex
   - m_fd : int
   - m_address : SocketAddress

   + connect(SocketAddress address): bool
   + disconnect(): bool
   + receive(uint8_t* buffer, const size_t buffer_length): int 
   + send(const uint8_t* buffer, const size_t bytes_to_send): int
}

class TcpListener
{
   - m_mutex : std::mutex
   - m_fd : int
   - m_address : SocketAddress

   + TcpListener()
   + bind(SocketAddress address): bool
   + listen(): bool
   + accept(): shared_ptr<ITcpStream>
   + disconnect(): bool
}

class ActiveTcpStream
{

}

class ActiveTcpListener
{

}

ITcpStream -> SocketAddress

ITcpListener -> SocketAddress

TcpStream --|> ITcpStream
TcpStream --> IpV4Address
TcpStream --> IpV6Address

TcpListener --|> ITcpListener
TcpListener --> TcpStream
TcpListener --> IpV4Address
TcpListener --> IpV6Address

ActiveTcpStream o-- TcpStream

ActiveTcpListener o-- TcpListener
ActiveTcpListener o-- TcpStream

@enduml